apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "dind.fullname" . }}
  labels:
    {{- include "dind.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "dind.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "dind.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "dind.serviceAccountName" . }}
      {{- with .Values.podSecurityContext }}
      securityContext:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.hostAliases }}
      hostAliases:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      {{- if .Values.secureDocker }}
        - name: storage
          emptyDir: {}
        - name: client-certs
          secret:
            secretName: {{ include "dind.fullname" . }}-cert-client
        - name: server-certs
          secret:
            secretName: {{ include "dind.fullname" . }}-cert-server
      {{- else }}
        - name: storage
          emptyDir: {}
      {{- end }}
      {{- with .Values.extraVolumes }}
        {{- toYaml . | nindent 8 }}
      {{- end }}

      containers:

        - name: dind
          image: "{{ .Values.dind.registry }}/{{ .Values.dind.repository }}:{{ .Values.dind.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.dind.pullPolicy }}
          envFrom:
            - configMapRef:
                name: {{ include "dind.fullname" . }}
          {{- range .Values.extraSecretNamesForEnvFrom }}
            - secretRef:
                name: {{ . }}
          {{- end }}
          env:
          {{- if .Values.secureDocker }}
            - name: DOCKER_TLS_CERTDIR
              value: /certs
          {{- end }}
          {{- if $.Values.env }}
            {{- range $key, $value := $.Values.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{/*
          If we want to secure docker, don't pass any command; the entrypoint
          script will generate and use TLS certs.
          */}}
          {{- if not .Values.secureDocker }}
          command:
            - "dockerd"
          args:
            - "--host"
            - "tcp://0.0.0.0:2375"
          {{- end }}
          {{- with .Values.dind.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: storage
              mountPath: /var/lib/docker
              subPath: docker
          {{- if .Values.secureDocker }}
            - name: client-certs
              mountPath: /certs/client/ca.pem
              subPath: ca.crt
              readOnly: true
            - name: client-certs
              mountPath: /certs/client/cert.pem
              subPath: tls.crt
              readOnly: true
            - name: client-certs
              mountPath: /certs/client/key.pem
              subPath: tls.key
              readOnly: true
            - name: server-certs
              mountPath: /certs/server/ca.pem
              subPath: ca.crt
              readOnly: true
            - name: server-certs
              mountPath: /certs/server/cert.pem
              subPath: tls.crt
              readOnly: true
            - name: server-certs
              mountPath: /certs/server/key.pem
              subPath: tls.key
              readOnly: true
          {{- end }}
          {{- with .Values.dind.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}

        {{- if $.Values.gc.enabled }}
        - name: gc
          image: "{{ .Values.gc.registry }}/{{ .Values.gc.repository }}:{{ .Values.gc.tag }}"
          imagePullPolicy: {{ .Values.gc.pullPolicy }}
          {{- with .Values.gc.securityContext }}
          securityContext:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          env:
            - name: DOCKER_HOST
              value: tcp://127.0.0.1:{{ include "dind.dockerPort" . }}
          {{- if .Values.secureDocker }}
            - name: DOCKER_TLS_CERTDIR
              value: /certs
            - name: DOCKER_CERT_PATH
              value: /certs/client
            - name: DOCKER_TLS_VERIFY
              value: "1"
          {{- end }}
          {{- if $.Values.gc.env }}
            {{- range $key, $value := $.Values.gc.env }}
            - name: {{ $key }}
              value: {{ $value | quote }}
            {{- end }}
          {{- end }}
          {{- with .Values.gc.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          {{- if .Values.secureDocker }}
            - name: client-certs
              mountPath: /certs/client/ca.pem
              subPath: ca.crt
              readOnly: true
            - name: client-certs
              mountPath: /certs/client/cert.pem
              subPath: tls.crt
              readOnly: true
            - name: client-certs
              mountPath: /certs/client/key.pem
              subPath: tls.key
              readOnly: true
          {{- end }}
          {{- with .Values.gc.extraVolumeMounts }}
            {{- toYaml . | nindent 12 }}
          {{- end }}
        {{- end }}

      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
